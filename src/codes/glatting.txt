def eksplisittGlatting(im, orig_im, k):
    image = im
    iteration = 30
    delta_t = 1 / iteration
    
    for i in range(iteration):
        laplace = (image[0:-2, 1:-1] +
            image[2:, 1:-1] +
            image[1:-1, 0:-2] +
            image[1:-1, 2:] -
            4 * image[1:-1, 1:-1])
        h = k*delta_t*(image[1:-1, 1:-1] - orig_im[1:-1, 1:-1])
        image[1:-1, 1:-1] += .25 * (laplace - h)
        image[:, 0] = image[:, 1]      # Neumann randbetingelse
        image[:, -1] = image[:, -2]    
        image[0, :] = image[1, :]      
        image[-1, :] = image[-2 , :]   
        image[image < 0] = 0           # klipp til lovlige verdier
        im[im > 1] = 1
    return im


def implisitt(u, alpha=0.25, h=0, n=1, rgb=True):
    size=u.shape[0]*u.shape[1]

    nupper = np.concatenate((np.zeros(u.shape[1]), -alpha * np.ones(size - u.shape[1])))
    upper = np.concatenate(([0, 0], -alpha * np.ones(size - 2)))
    center = np.concatenate(([1], (1 + 4 * alpha) * np.ones(size - 2), [1]))
    lower = np.concatenate((-alpha * np.ones(size - 2), [0, 0]))
    nlower = np.concatenate((-alpha * np.ones(size - u.shape[1]), np.zeros(u.shape[1])))
    diags = np.array([nupper, upper, center, lower, nlower])
    A = spdiags(diags, [u.shape[1], 1, 0, -1, -u.shape[1]], size, size).tocsc()

    im=np.copy(u)
    if rgb:
        for iterations in range(n):
            for i in range (u.shape[2]):
                im[:,:,i]=spsolve(A,im[:,:,i].flatten()).reshape(u[:,:,i].shape)
                im[:, 0,] = im[:, 1]      # Neumann randbetingelser
                im[:, -1] = im[:, -2]     #
                im[0, :] = im[1, :]       #
                im[-1, :] = im[-2 , :]    #
            
    else:
        for iterations in range(n):
            im=spsolve(A,im.flatten())
            im=im.reshape(u.shape)
            im[:, 0,] = im[:, 1]      # Neumann randbetingelser
            im[:, -1] = im[:, -2]     #
            im[0, :] = im[1, :]       #
            im[-1, :] = im[-2 , :]    #
                
    return im
