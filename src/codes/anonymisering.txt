def detectFace(file, scaleFactor = 1.2, minNeighbors = 5):
    image = cv2.imread(file)
    
    face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
    faces_rects = face_cascade.detectMultiScale(image, scaleFactor, minNeighbors)
    faces = face_cascade.detectMultiScale(image, scaleFactor, minNeighbors, minSize = (30,30))
    
    for (x,y,w,h) in faces_rects:
        cv2.rectangle(image, (x, y), (x+w, y+h), (0, 255, 0), 2)
        
    return len(faces), image


def blurFace(file, scaleFactor = 1.2, minNeighbors = 5):
    image = cv2.imread(file) #leser inn bildet
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    
    face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml') 
    faces = face_cascade.detectMultiScale(image, scaleFactor, minNeighbors, minSize = (30,30))
    for (x,y,w,h) in faces:
        RoI = image[y:y+h, x:x+w]                          #Region of Interest --> ansiktet
        RoI = RoI.astype(dtype = float)
        blur = eks.eksplisittAnonym(RoI,image[y:y+h, x:x+w], 0.25,250)               
        image[y:y+h, x:x+w] = blur
        
    return len(faces), image
